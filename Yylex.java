/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;

class MI_int {
        
         final static int MAX_VALUE=2147483647;                          
         final static int MIN_VALUE= -2147483648;
         

            }
class CSXToken {
	int linenum;
	int colnum;
	CSXToken(int line,int col) {
		linenum=line;colnum=col;
	}
}

class CSXIntLitToken extends CSXToken {
	int intValue;
	CSXIntLitToken(int val,int line,int col) {
	   super(line,col);intValue=val; 
	};
}

class CSXIdentifierToken extends CSXToken
 {
	String identifierText;
	CSXIdentifierToken(String text,int line,int col) {
		super(line,col);identifierText=text;
	}
}

class CSXCharLitToken extends CSXToken {
	char charValue;
	CSXCharLitToken(char val,int line,int col) {
		super(line,col);charValue=val;
	}
}

class CSXStringLitToken extends CSXToken {
	String stringText; // Full text of string literal,
                          //  including quotes & escapes
	CSXStringLitToken(String text,int line,int col) {
		super(line,col);
		stringText=text;
	}
}

// This class is used to track line and column numbers
// Feel free to change to extend it
class Pos {
	static int  linenum = 1; /* maintain this as line number current
                                 token was scanned on */
	static int  colnum = 1; /* maintain this as column number current
                                 token began at */
	static int  line = 1; /* maintain this as line number after
					scanning current token  */
	static int  col = 1; /* maintain this as column number after
					scanning current token  */
	static void setpos() { // set starting position for current token
		linenum = line;
		colnum = col;
	}
}
/*
class Symbol { 
	public int sym;
	public CSXToken value;
	public Symbol(int tokenType, CSXToken theToken) {
		sym = tokenType;
		value = theToken;
	}
}
*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>csx_go.jlex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\31\1\32\1\61\1\61\1\61\22\0\1\31\1\42\1\34"+
    "\1\37\2\0\1\52\1\35\1\45\1\46\1\51\1\40\1\56\1\41"+
    "\1\0\1\36\12\24\1\0\1\44\1\54\1\43\1\55\2\0\1\5"+
    "\1\7\1\12\1\6\1\4\1\2\1\22\1\13\1\1\1\26\1\21"+
    "\1\11\1\26\1\14\1\10\1\20\1\26\1\3\1\15\1\16\1\17"+
    "\1\23\4\26\1\47\1\33\1\50\3\0\1\5\1\7\1\12\1\6"+
    "\1\4\1\2\1\22\1\13\1\1\1\26\1\21\1\11\1\26\1\27"+
    "\1\10\1\20\1\26\1\3\1\15\1\30\1\17\1\23\4\26\1\57"+
    "\1\53\1\60\1\25\6\0\1\61\u1fa2\0\1\61\1\61\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\12\2\1\3\1\1\1\4\1\5\2\1"+
    "\1\6\1\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\2\1\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\15\2\2\0\1\27\4\0\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\2\1\37"+
    "\12\2\1\40\1\41\1\42\2\0\1\2\1\43\1\44"+
    "\1\2\1\45\1\46\1\2\1\47\1\50\2\2\1\0"+
    "\1\51\1\52\1\2\1\53\1\54\1\2\1\51\1\55"+
    "\1\2\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u0258\0\62\0\62"+
    "\0\u028a\0\u02bc\0\u02ee\0\u0320\0\62\0\62\0\u0352\0\u0384"+
    "\0\62\0\62\0\62\0\62\0\62\0\62\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\62\0\62\0\62\0\u012c\0\u047e\0\u04b0"+
    "\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640"+
    "\0\u0672\0\u06a4\0\u06d6\0\u028a\0\u0708\0\62\0\u073a\0\u076c"+
    "\0\u079e\0\u07d0\0\62\0\62\0\62\0\62\0\62\0\62"+
    "\0\u012c\0\u0802\0\u012c\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc"+
    "\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u012c\0\62\0\62"+
    "\0\u0a28\0\u0a5a\0\u0a8c\0\u012c\0\u012c\0\u0abe\0\u012c\0\u012c"+
    "\0\u0af0\0\u012c\0\u012c\0\u0b22\0\u0b54\0\u0b86\0\u0b86\0\u012c"+
    "\0\u0bb8\0\u012c\0\u012c\0\u0bea\0\62\0\u012c\0\u0c1c\0\u012c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\1\10\2\7"+
    "\1\11\3\7\1\12\1\7\1\13\2\7\1\14\1\15"+
    "\1\16\2\7\1\12\1\17\1\20\1\2\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\64\0\1\7\1\46\11\7\1\47"+
    "\10\7\1\0\1\7\1\47\1\7\32\0\4\7\1\50"+
    "\2\7\1\51\6\7\1\52\5\7\1\0\3\7\32\0"+
    "\3\7\1\53\20\7\1\0\3\7\32\0\10\7\1\54"+
    "\13\7\1\0\3\7\32\0\24\7\1\0\3\7\32\0"+
    "\7\7\1\55\14\7\1\0\3\7\32\0\7\7\1\56"+
    "\2\7\1\57\11\7\1\0\3\7\32\0\2\7\1\60"+
    "\21\7\1\0\3\7\32\0\2\7\1\61\1\7\1\62"+
    "\17\7\1\0\3\7\32\0\4\7\1\63\17\7\1\0"+
    "\3\7\55\0\1\15\35\0\33\64\1\65\1\66\25\64"+
    "\33\67\1\70\1\0\25\67\36\0\1\71\62\0\1\72"+
    "\65\0\1\73\61\0\1\74\70\0\1\75\62\0\1\76"+
    "\51\0\1\77\61\0\1\100\17\0\15\7\1\101\6\7"+
    "\1\0\2\7\1\101\32\0\10\7\1\102\13\7\1\0"+
    "\3\7\32\0\2\7\1\103\21\7\1\0\3\7\32\0"+
    "\13\7\1\104\10\7\1\0\1\7\1\104\1\7\32\0"+
    "\4\7\1\105\10\7\1\106\6\7\1\0\2\7\1\106"+
    "\32\0\14\7\1\107\7\7\1\0\3\7\32\0\7\7"+
    "\1\110\14\7\1\0\3\7\32\0\13\7\1\111\10\7"+
    "\1\0\1\7\1\111\1\7\32\0\4\7\1\112\17\7"+
    "\1\0\3\7\32\0\16\7\1\113\5\7\1\0\3\7"+
    "\32\0\1\114\23\7\1\0\3\7\32\0\11\7\1\115"+
    "\12\7\1\0\3\7\32\0\2\7\1\116\21\7\1\0"+
    "\3\7\60\0\2\64\2\0\2\64\62\0\1\117\53\0"+
    "\2\67\2\0\2\67\25\0\32\71\1\120\27\71\37\121"+
    "\1\122\22\121\1\0\14\7\1\123\7\7\1\0\3\7"+
    "\32\0\11\7\1\124\12\7\1\0\3\7\32\0\5\7"+
    "\1\125\16\7\1\0\3\7\32\0\16\7\1\126\5\7"+
    "\1\0\3\7\32\0\3\7\1\127\20\7\1\0\3\7"+
    "\32\0\10\7\1\130\13\7\1\0\3\7\32\0\14\7"+
    "\1\131\7\7\1\0\3\7\32\0\2\7\1\132\21\7"+
    "\1\0\3\7\32\0\3\7\1\133\20\7\1\0\3\7"+
    "\32\0\13\7\1\134\10\7\1\0\1\7\1\134\1\7"+
    "\32\0\20\7\1\135\3\7\1\0\3\7\31\0\37\121"+
    "\1\136\61\121\1\137\22\121\1\0\3\7\1\140\20\7"+
    "\1\0\3\7\32\0\2\7\1\141\21\7\1\0\3\7"+
    "\32\0\15\7\1\142\6\7\1\0\2\7\1\142\32\0"+
    "\15\7\1\143\6\7\1\0\2\7\1\143\32\0\4\7"+
    "\1\144\17\7\1\0\3\7\70\0\1\145\23\0\13\7"+
    "\1\146\10\7\1\0\1\7\1\146\1\7\32\0\21\7"+
    "\1\147\2\7\1\0\3\7\32\0\3\7\1\150\20\7"+
    "\1\0\3\7\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\14\1\2\11\4\1\2\11\2\1\6\11"+
    "\4\1\3\11\16\1\2\0\1\11\4\0\6\11\16\1"+
    "\2\11\2\0\13\1\1\0\6\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   return new Symbol(sym.EOF, new CSXToken(0,0));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Pos.setpos(); Pos.col+= yytext().length(); 
return new Symbol( sym.error, new CSXToken( Pos.linenum, Pos.colnum));
            }
          case 47: break;
          case 2: 
            { Pos.setpos(); Pos.col+= yytext().length(); 
return new Symbol( sym.IDENTIFIER, new CSXIdentifierToken(yytext(), Pos.linenum, Pos.colnum));
            }
          case 48: break;
          case 3: 
            { // This def doesn't check for overflow -- be sure to update it 
if(yytext().substring(0,1).equals("~"))	{
   Pos.setpos(); Pos.col+=yytext().length();
	String s= "-";
 		s= s.concat(yytext().substring(1));
   return new Symbol(sym.INTLIT, new CSXIntLitToken(Integer.parseInt(s),Pos.linenum,Pos.colnum));
					}


  if(MI_int.MAX_VALUE < Integer.parseInt(yytext())){
       Pos.setpos(); Pos.col += yytext().length();
           
       return new Symbol(sym.INTLIT, new CSXIntLitToken(MI_int.MAX_VALUE, Pos.linenum,Pos.colnum));         

                                            }
 if(MI_int.MIN_VALUE>Integer.parseInt(yytext())){

   Pos.setpos(); Pos.col+=yytext().length();
   return new Symbol(sym.INTLIT, new CSXIntLitToken(MI_int.MIN_VALUE, Pos.linenum,Pos.colnum));         
                                         }

  Pos.setpos(); Pos.col+= yytext().length(); return new Symbol(sym.INTLIT, new CSXIntLitToken(Integer.parseInt(yytext()),Pos.linenum, Pos.colnum));
            }
          case 49: break;
          case 4: 
            { Pos.setpos(); Pos.col+=1;
            }
          case 50: break;
          case 5: 
            { Pos.setpos();Pos.line+=1;Pos.col=1;
 /*return new Symbol(sym.EL, new CSXToken(Pos.linenum, Pos.colnum));*/
            }
          case 51: break;
          case 6: 
            { Pos.setpos(); Pos.col+=1; return new Symbol(sym.SLASH,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 52: break;
          case 7: 
            { Pos.setpos(); Pos.col += 1; return new Symbol(sym.PLUS, new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 53: break;
          case 8: 
            { Pos.setpos(); Pos.col +=1; return new Symbol(sym.MINUS, new
CSXToken(Pos.linenum, Pos.colnum));
            }
          case 54: break;
          case 9: 
            { Pos.setpos(); Pos.col+=1; return new Symbol(sym.NOT,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 55: break;
          case 10: 
            { Pos.setpos(); Pos.col +=1; return new Symbol(sym.ASG,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 56: break;
          case 11: 
            { Pos.setpos(); Pos.col +=1; return new Symbol(sym.SEMI, new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 57: break;
          case 12: 
            { Pos.setpos(); Pos.col +=1; return new Symbol(sym.LPAREN,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 58: break;
          case 13: 
            { Pos.setpos(); Pos.col +=1; return new Symbol(sym.RPAREN,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 59: break;
          case 14: 
            { Pos.setpos(); Pos.col +=1; return new Symbol(sym.LBRACKET,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 60: break;
          case 15: 
            { Pos.setpos(); Pos.col +=1; return new Symbol(sym.RBRACKET,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 61: break;
          case 16: 
            { Pos.setpos(); Pos.col+=1; return new Symbol(sym.MULT,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 62: break;
          case 17: 
            { Pos.setpos(); Pos.col+=1; return new Symbol(sym.LT,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 63: break;
          case 18: 
            { Pos.setpos(); Pos.col+=1; return new Symbol(sym.GT,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 64: break;
          case 19: 
            { Pos.setpos(); Pos.col+=1; return new Symbol(sym.COMMA,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 65: break;
          case 20: 
            { Pos.setpos(); Pos.col+=1; return new Symbol(sym.LBRACE,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 66: break;
          case 21: 
            { Pos.setpos(); Pos.col+=1; return new Symbol(sym.RBRACE,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 67: break;
          case 22: 
            { Pos.setpos(); Pos.col+=2;
 return new Symbol(sym.rw_IF, new CSXToken(Pos.linenum, Pos.colnum));
            }
          case 68: break;
          case 23: 
            { Pos.setpos(); Pos.col += yytext().length(); return new Symbol(sym.STRLIT, new CSXStringLitToken(yytext(), Pos.linenum, Pos.colnum));
            }
          case 69: break;
          case 24: 
            { Pos.setpos(); Pos.col +=2; return new Symbol(sym.NOTEQ, new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 70: break;
          case 25: 
            { Pos.setpos(); Pos.col+=2; return new Symbol(sym.EQ,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 71: break;
          case 26: 
            { Pos.setpos(); Pos.col+=2; return new Symbol(sym.CAND,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 72: break;
          case 27: 
            { Pos.setpos(); Pos.col+=2; return new Symbol(sym.COR,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 73: break;
          case 28: 
            { Pos.setpos(); Pos.col+=2; return new Symbol(sym.LEQ,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 74: break;
          case 29: 
            { Pos.setpos(); Pos.col+=2; return new Symbol(sym.GEQ,
new CSXToken(Pos.linenum,Pos.colnum));
            }
          case 75: break;
          case 30: 
            { Pos.setpos(); Pos.col+=3;
return new Symbol( sym.rw_INT, new CSXToken(Pos.linenum, Pos.colnum));
            }
          case 76: break;
          case 31: 
            { return new Symbol( sym.rw_FOR, new CSXToken(Pos.linenum, Pos.colnum));
            }
          case 77: break;
          case 32: 
            { Pos.setpos(); Pos.col+=3;
return new Symbol( sym.VAR,  new CSXToken(Pos.linenum, Pos.colnum));
            }
          case 78: break;
          case 33: 
            { Pos.setpos(); Pos.col +=yytext().length(); return new Symbol(sym.CHARLIT,new CSXCharLitToken(yytext().charAt(1), Pos.linenum, Pos.colnum));
            }
          case 79: break;
          case 34: 
            { Pos.setpos();
Pos.line+=1;
            }
          case 80: break;
          case 35: 
            { Pos.setpos(); Pos.col+=4;
return new Symbol( sym.rw_FUNC, new CSXToken(Pos.linenum, Pos.colnum));
            }
          case 81: break;
          case 36: 
            { Pos.setpos(); Pos.col+=4;
return new Symbol ( sym.rw_READ, new CSXToken(Pos.linenum, Pos.colnum));
            }
          case 82: break;
          case 37: 
            { Pos.setpos(); Pos.col+=4;
return  new Symbol( sym.rw_ELSE, new CSXToken(Pos.linenum, Pos.colnum));
            }
          case 83: break;
          case 38: 
            { Pos.setpos(); Pos.col+=4;
return new Symbol(sym.rw_BOOL, new CSXToken(Pos.linenum, Pos.colnum));
            }
          case 84: break;
          case 39: 
            { Pos.setpos(); Pos.col+=4;
return new Symbol(sym.rw_CHAR, new CSXToken(Pos.linenum, Pos.colnum));
            }
          case 85: break;
          case 40: 
            { Pos.setpos(); Pos.col+=4;
return new Symbol( sym.rw_TRUE, new CSXToken(Pos.linenum, Pos.colnum));
            }
          case 86: break;
          case 41: 
            { for(int i=0; i< yytext().length()-1;i++){
          Pos.setpos();
          if((yytext().substring(i,i+2)).equals("/n")){                     
             
             Pos.line+=1;
       }
       }
 Pos.line += 1;
            }
          case 87: break;
          case 42: 
            { Pos.setpos(); Pos.col+=5;
return new Symbol( sym.rw_FALSE, new CSXToken(Pos.linenum, Pos.colnum));
            }
          case 88: break;
          case 43: 
            { Pos.setpos(); Pos.col+=5;
return new Symbol(sym.rw_CONST,new CSXToken(Pos.linenum, Pos.colnum));
            }
          case 89: break;
          case 44: 
            { Pos.setpos(); Pos.col+=5;
return new Symbol( sym.rw_PRINT, new CSXToken (Pos.linenum,Pos.colnum));
            }
          case 90: break;
          case 45: 
            { Pos.setpos(); Pos.col+=6;
return new Symbol( sym.rw_RETURN, new CSXToken(Pos.linenum, Pos.colnum));
            }
          case 91: break;
          case 46: 
            { Pos.setpos(); Pos.col+=7;
return new Symbol( sym.rw_PACKAGE, new CSXToken(Pos.linenum, Pos.colnum));
            }
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
